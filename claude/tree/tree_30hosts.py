# Generated by Claude-3.5-Sonnet

from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.cli import CLI
from mininet.log import setLogLevel

def createNetwork():
    net = Mininet()
    
    # Add controllers with specific control domains
    c1 = net.addController('c1', controller=RemoteController, ip='127.0.0.1', port=6633)
    c2 = net.addController('c2', controller=RemoteController, ip='127.0.0.1', port=6634)
    c3 = net.addController('c3', controller=RemoteController, ip='127.0.0.1', port=6635)
    
    # Add switches (root and intermediate level)
    s1 = net.addSwitch('s1')  # Root switch
    s2 = net.addSwitch('s2')  # Level 1
    s3 = net.addSwitch('s3')  # Level 1
    s4 = net.addSwitch('s4')  # Level 2
    s5 = net.addSwitch('s5')  # Level 2
    
    # Connect switches in tree topology
    # Level 1 connections
    net.addLink(s1, s2)
    net.addLink(s1, s3)
    
    # Level 2 connections
    net.addLink(s2, s4)
    net.addLink(s3, s5)
    
    # Add hosts and connect them
    hosts = []
    for i in range(30):
        host = net.addHost(f'h{i+1}')
        hosts.append(host)
        # Distribute hosts evenly among leaf switches
        if i < 15:
            net.addLink(host, s4)
        else:
            net.addLink(host, s5)
    
    # Assign switches to controllers
    s1.start([c1])  # Root switch controlled by c1
    s2.start([c1, c2])  # Level 1 switches controlled by c1 and c2
    s3.start([c1, c2])
    s4.start([c2, c3])  # Leaf switches controlled by c2 and c3
    s5.start([c2, c3])
    
    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    createNetwork() 