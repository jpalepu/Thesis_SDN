# Generated by gpt4o

from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.cli import CLI
from mininet.log import setLogLevel

def setup_tree_network(host_count=20, switch_count=5, controllers=None):
    """Sets up a tree topology network with specified hosts and switches."""
    if controllers is None:
        controllers = {
            'c1': ('127.0.0.1', 6633),
            'c2': ('127.0.0.1', 6634),
            'c3': ('127.0.0.1', 6635)
        }

    net = Mininet()

    # Add controllers
    for name, (ip, port) in controllers.items():
        net.addController(name, controller=RemoteController, ip=ip, port=port)

    # Add switches (root and intermediate level)
    s1 = net.addSwitch('s1')  # Root switch
    s2 = net.addSwitch('s2')  # Level 1
    s3 = net.addSwitch('s3')  # Level 1
    s4 = net.addSwitch('s4')  # Level 2
    s5 = net.addSwitch('s5')  # Level 2

    # Connect switches in tree topology
    # Level 1 connections
    net.addLink(s1, s2)
    net.addLink(s1, s3)

    # Level 2 connections
    net.addLink(s2, s4)
    net.addLink(s3, s5)

    # Add hosts and connect them
    hosts = []
    for i in range(1, host_count + 1):
        host = net.addHost(f'h{i}')
        hosts.append(host)
        # Distribute hosts evenly among leaf switches
        if i <= host_count // 2:
            net.addLink(host, s4)
        else:
            net.addLink(host, s5)

    # Assign switches to controllers for redundancy
    controller_assignments = {
        's1': [net.get('c1')],
        's2': [net.get('c1'), net.get('c2')],
        's3': [net.get('c1'), net.get('c2')],
        's4': [net.get('c2'), net.get('c3')],
        's5': [net.get('c2'), net.get('c3')],
    }

    for switch_name, controller_list in controller_assignments.items():
        net.get(switch_name).start(controller_list)

    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    setup_tree_network() 