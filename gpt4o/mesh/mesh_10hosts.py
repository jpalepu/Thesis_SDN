# Generated by gpt4o

from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.cli import CLI
from mininet.log import setLogLevel

def setup_mesh_network(host_count=10, switch_count=5, controllers=None):
    """Sets up a full mesh topology network with specified hosts and switches."""
    if controllers is None:
        controllers = {
            'c1': ('127.0.0.1', 6633),
            'c2': ('127.0.0.1', 6634),
            'c3': ('127.0.0.1', 6635)
        }

    net = Mininet()

    # Add controllers
    for name, (ip, port) in controllers.items():
        net.addController(name, controller=RemoteController, ip=ip, port=port)

    # Add switches
    switches = []
    for i in range(1, switch_count + 1):
        switch = net.addSwitch(f's{i}')
        switches.append(switch)

    # Add hosts and connect them to multiple switches for redundancy
    hosts = []
    for i in range(1, host_count + 1):
        host = net.addHost(f'h{i}')
        hosts.append(host)
        switch1 = switches[i % switch_count]
        switch2 = switches[(i + 1) % switch_count]
        net.addLink(host, switch1)
        net.addLink(host, switch2)

    # Connect switches in a full mesh topology
    for i in range(len(switches)):
        for j in range(i + 1, len(switches)):
            net.addLink(switches[i], switches[j])

    # Assign switches to controllers for redundancy
    controller_assignments = {
        's1': [net.get('c1'), net.get('c2')],
        's2': [net.get('c1'), net.get('c2')],
        's3': [net.get('c2'), net.get('c3')],
        's4': [net.get('c2'), net.get('c3')],
        's5': [net.get('c1'), net.get('c3')],
    }

    for switch_name, controller_list in controller_assignments.items():
        net.get(switch_name).start(controller_list)

    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    setup_mesh_network() 